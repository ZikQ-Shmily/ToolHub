name: Build & Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: true

# 可选：国内镜像加速（取消注释使用）
# env:
#   ELECTRON_MIRROR: https://npmmirror.com/mirrors/electron/
#   ELECTRON_BUILDER_BINARIES_MIRROR: https://npmmirror.com/mirrors/electron-builder-binaries/

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      # Windows：安装版(nsis) + 绿色版(portable)，x64/ia32/arm64
      - name: Build Windows (x64/ia32/arm64)
        if: runner.os == 'Windows'
        run: npx electron-builder --win nsis portable --x64 --ia32 --arm64 --publish never

      # macOS：dmg + zip，x64/arm64
      - name: Build macOS (x64/arm64)
        if: runner.os == 'macOS'
        run: npx electron-builder --mac dmg zip --x64 --arm64 --publish never

      # Linux：AppImage + deb，x64/arm64
      - name: Build Linux (x64/arm64)
        if: runner.os == 'Linux'
        run: npx electron-builder --linux AppImage deb --x64 --arm64 --publish never

      # 只上传最终产物（不要上传 *-unpacked/**）
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: toolhub-${{ runner.os }}
          path: |
            release/*.exe
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
          if-no-files-found: warn

  release:
    name: Publish GitHub Release (on tag)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 若该 tag 的 Release 已存在，先删除所有旧资产，避免 already_exists
      - name: Delete existing assets in release (if any)
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const tag = process.env.GITHUB_REF.replace('refs/tags/', '');
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              const assets = await github.paginate(github.rest.repos.listReleaseAssets, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                per_page: 100
              });
              for (const a of assets) {
                core.info(`Deleting asset: ${a.name} (${a.id})`);
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: a.id
                });
              }
            } catch (e) {
              core.info(`No existing release for ${tag} or cannot fetch. Skipping cleanup.`);
            }

      - name: Create/Update Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.AppImage
            artifacts/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
