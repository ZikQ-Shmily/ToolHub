name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      ELECTRON_BUILDER_DISABLE_NOTARIZE: "true"

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: arm64

          # Linux
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-latest
            arch: arm64

          # macOS
          - os: macos-13
            arch: x64
          - os: macos-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      # 打包
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: npx electron-builder --win nsis portable --${{ matrix.arch }} --publish never

      - name: Build macOS
        if: startsWith(matrix.os, 'macos')
        run: npx electron-builder --mac dmg zip --${{ matrix.arch }} --publish never

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: npx electron-builder --linux AppImage deb --${{ matrix.arch }} --publish never

      # ✅ 只上传顶层安装包；同时包含 Windows 安装版 + 便携版
      - name: Upload artifacts (top-level installers only)
        uses: actions/upload-artifact@v4
        with:
          name: toolhub-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
            release/*setup*.exe
            release/*_win_*.exe
          if-no-files-found: warn
          retention-days: 7

  release:
    name: Publish GitHub Release (on tag)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # ✅ 再次兜底清理非安装包文件
      - name: Prune unwanted files
        run: |
          find artifacts -type f \
            ! -name '*.dmg' \
            ! -name '*.zip' \
            ! -name '*.AppImage' \
            ! -name '*.deb' \
            ! -name '*setup*.exe' \
            ! -name '*_win_*.exe' \
            -delete

      # 删除旧 release/tag（若存在）
      - name: Delete old release (if exists)
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 创建 Release 并上传
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          make_latest: true
          name: ToolHub ${{ github.ref_name }}
          generate_release_notes: true
          overwrite: false
          fail_on_unmatched_files: false
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*setup*.exe
            artifacts/**/*_win_*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
