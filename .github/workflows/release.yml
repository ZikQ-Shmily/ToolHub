name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      ELECTRON_BUILDER_DISABLE_NOTARIZE: "true"

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: arm64

          # Linux
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-latest
            arch: arm64

          # macOS（latest 上用 Rosetta/x64 进程来稳定打 DMG）
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      # macOS：装 Rosetta + 用 x64 Node（electron-builder 在 x64 进程下走 HFS+，避免 APFS hdiutil 问题）
      - name: Install Rosetta (Apple Silicon)
        if: startsWith(matrix.os, 'macos')
        run: |
          if /usr/bin/pgrep oahd >/dev/null; then
            echo "Rosetta already installed"
          else
            /usr/sbin/softwareupdate --install-rosetta --agree-to-license
          fi

      - name: Setup Node (x64 via Rosetta on macOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: x64
          cache: npm

      - name: Setup Node (default)
        if: "!startsWith(matrix.os, 'macos')"
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      # Windows
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: npx electron-builder --win nsis portable --${{ matrix.arch }} --publish never

      # macOS（必须产出 DMG；重试 3 次，不做 ZIP 降级）
      - name: Build macOS (DMG required; retry up to 3x)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          set -e
          arch -x86_64 node -v
          for i in 1 2 3; do
            echo "mac DMG build attempt $i/3 for ${{ matrix.arch }} (x86_64 process via Rosetta)"
            if arch -x86_64 npx electron-builder --mac dmg zip --${{ matrix.arch }} --publish never; then
              echo "mac DMG build succeeded"
              exit 0
            fi
            echo "mac DMG build failed, retrying in 15s..."
            sleep 15
          done
          echo "mac DMG build failed after 3 attempts"
          exit 1

      # Linux
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: npx electron-builder --linux AppImage deb --${{ matrix.arch }} --publish never

      # 只上传 release 顶层安装包（避免把 unpacked 杂项带上）
      - name: Upload artifacts (top-level installers only)
        uses: actions/upload-artifact@v4
        with:
          name: toolhub-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
            release/ToolHub_*_win_*.exe   # ✅ 一个模式同时包含安装版和便携版，避免重复
          if-no-files-found: warn
          retention-days: 7

  release:
    name: Publish GitHub Release (on tag)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 再次兜底清理非安装包文件
      - name: Prune unwanted files
        run: |
          find artifacts -type f \
            ! -name '*.dmg' \
            ! -name '*.zip' \
            ! -name '*.AppImage' \
            ! -name '*.deb' \
            ! -name 'ToolHub_*_win_*.exe' \
            -delete

      # 可选：删除旧 release/tag（若你要复用同名 tag）
      - name: Delete old release (if exists)
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          make_latest: true
          name: ToolHub ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/ToolHub_*_win_*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
